- hosts: localhost
  become: true

  vars:
    data_root: /mnt/disk/docker
    containerd_root_dir: /mnt/disk/containerd-root
    containerd_state_dir: /mnt/disk/containerd-state
    user: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required dependencies
      apt:
        name:
          - ca-certificates
          - curl
        state: present

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Detect dpkg architecture
      command: dpkg --print-architecture
      register: dpkg_arch
      changed_when: false

    - name: Add Docker repository to apt sources
      lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        create: yes
        line: "deb [arch={{ dpkg_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"

    - name: Update apt cache again
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add user to docker group
      user:
        name: "{{ user }}"
        groups: docker
        append: yes

    - name: Inform user to log out and back in
      debug:
        msg: "Please log out and back in for the group changes to take effect."

    - name: Stop Docker service
      systemd:
        name: docker
        state: stopped

    - name: Ensure /etc/docker directory exists
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Set new data directory
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "data-root": "{{ data_root }}"
          }
        owner: root
        group: root
        mode: '0644'

    - name: Ensure Docker data directory exists
      file:
        path: "{{ data_root }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker root directory
      shell: |
        docker info | awk -F': ' '/Docker Root Dir/ {print $2}'
      register: docker_root_dir
      changed_when: false

    - name: Show Docker root directory
      debug:
        msg: "{{ docker_root_dir.stdout }}"

    - name: Stop containerd service
      systemd:
        name: containerd
        state: stopped

    - name: Ensure new containerd data directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ containerd_root_dir }}"
        - "{{ containerd_state_dir }}"

    - name: Configure containerd data directory
      blockinfile:
        path: /etc/containerd/config.toml
        create: yes
        owner: root
        group: root
        mode: '0644'
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          root = "{{ containerd_root_dir }}"
          state = "{{ containerd_state_dir }}"

    - name: Start and enable containerd service
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: Verify containerd root directory
      shell: awk -F'= ' '/^root/ {gsub(/"/,""); print $2}' /etc/containerd/config.toml
      register: containerd_root_dir_dir
      changed_when: false

    - name: Show containerd root directory
      debug:
        msg: "{{ containerd_root_dir_dir.stdout }}"

    - name: Ensure bashrc.d directory exists for target user
      file:
        path: "~{{ user }}/.bashrc.d"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Ensure .bashrc sources ~/.bashrc.d/*.sh
      blockinfile:
        path: "~{{ user }}/.bashrc"
        create: yes
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'
        marker: "# {mark} ANSIBLE MANAGED BLOCK: bashrc.d sourcing"
        block: |
          if [ -d "$HOME/.bashrc.d" ]; then
            for f in "$HOME/.bashrc.d/"*.sh; do
              [ -r "$f" ] && . "$f"
            done
          fi

    - name: Create docker bashrc file
      file:
        path: "~{{ user }}/.bashrc.d/docker.sh"
        state: touch
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'

    - name: Add functions to docker bashrc
      blockinfile:
        path: "~{{ user }}/.bashrc.d/docker.sh"
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'
        block: |
          {% raw %}
          docker () {
            if [ "$1" = "ps" ]; then
              command docker ps -a --format 'table {{.Names}}\t{{.Ports}}\t{{.Status}}' | { read -r header; printf '%s\n' "$header"; sort -k 1; }
            else
              command docker "$@"
            fi
          }
          {% endraw %}

          docker-clean () {
            ids="$(command docker ps -aq)"
            if [ -n "$ids" ]; then
              command docker stop $ids
              command docker rm $ids
            fi

            imgs="$(command docker images --filter 'dangling=true' -q --no-trunc)"
            if [ -n "$imgs" ]; then
              command docker rmi $imgs
            fi

            command docker network prune -f
          }

    - name: Ensure AppArmor utilities are present (for aa-remove-unknown)
      apt:
        name: apparmor-utils
        state: present

    - name: Remove unknown AppArmor profiles
      command: aa-remove-unknown
      changed_when: false