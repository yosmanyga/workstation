- hosts: localhost
  become: true

  vars_files:
    - ../../vars.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - ca-certificates
        - curl

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker repository to apt sources
      lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        create: yes
        line: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"

    - name: Update apt cache again
      apt:
        update_cache: yes

    - name: Install required dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add user to docker group
      user:
        name: "{{ lookup('env', 'USER') }}"
        groups: docker
        append: yes

    - name: Inform user to log out and back in
      debug:
        msg: "Please log out and back in for the group changes to take effect."

    - name: Create bashrc directory
      file: path=~/.bashrc.d state=directory

    - name: Create docker bashrc
      file: path=~/.bashrc.d/docker.sh state=touch

    - name: Add functions to bashrc
      blockinfile:
        path: ~/.bashrc.d/docker.sh
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          docker () {
              if [ "$1" == "ps" ]; then
              command docker ps -a --format 'table \{\{.Names}}\t\{\{.Ports\}\}\t\{\{.Status\}\}' | (read -r; printf '%s\n' "$REPLY"; sort -k 1 )
              else
              command docker '$@'
              fi
          }

          docker-clean () {
              docker stop $(docker ps -a -q)
              docker rm $(docker ps -a -q)

              docker rmi $(docker images --filter 'dangling=true' -q --no-trunc)

              docker network prune -f
          }
    - name: Remove unknown AppArmor profiles
      command: sudo aa-remove-unknown